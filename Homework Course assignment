//代码雨
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <unistd.h>

#define WIDTH 80
#define HEIGHT 25
#define MAX_DROPS 80
#define MAX_CODE_LENGTH 15
#define MIN_CODE_LENGTH 5

// 代码滴结构体
typedef struct {
    int x;
    int y;
    int length;
    char code[MAX_CODE_LENGTH];
} Drop;

// 初始化代码滴
void initDrops(Drop drops[]) {
    for (int i = 0; i < MAX_DROPS; i++) {
        drops[i].x = rand() % WIDTH;
        drops[i].y = rand() % HEIGHT;
        drops[i].length = rand() % (MAX_CODE_LENGTH - MIN_CODE_LENGTH + 1) + MIN_CODE_LENGTH;
        for (int j = 0; j < drops[i].length; j++) {
            // 生成更丰富的字符，包括特殊符号，增强代码真实感
            drops[i].code[j] = rand() % 94 + 33;
        }
        drops[i].code[drops[i].length] = '\0';
    }
}
// 更新代码滴位置并处理边界与新滴生成
void updateDrops(Drop drops[]) {
    for (int i = 0; i < MAX_DROPS; i++) {
        // 代码滴下落，增加随机偏移，模拟不规则下落
        drops[i].y += rand() % 3;
        // 到达屏幕底部，重置位置并生成新代码
        if (drops[i].y >= HEIGHT) {
            drops[i].y = 0;
            drops[i].x = rand() % WIDTH;
            drops[i].length = rand() % (MAX_CODE_LENGTH - MIN_CODE_LENGTH + 1) + MIN_CODE_LENGTH;
            for (int j = 0; j < drops[i].length; j++) {
                drops[i].code[j] = rand() % 94 + 33;
            }
            drops[i].code[drops[i].length] = '\0';
        }
    }
}

// 绘制代码雨
void drawDrops(Drop drops[]) {
    // 双缓冲机制，用于平滑过渡
    char buffer[HEIGHT][WIDTH];
    memset(buffer, '\0', sizeof(buffer));

    // 将代码滴字符存入缓冲
    for (int i = 0; i < MAX_DROPS; i++) {
        int len = drops[i].length;
        for (int j = 0; j < len && drops[i].y + j < HEIGHT; j++) {
            buffer[drops[i].y + j][drops[i].x] = drops[i].code[j];
        }
    }
   // 打印缓冲中的内容
    system("clear");
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (buffer[i][j]!= '\0') {
                printf("%c", buffer[i][j]);
            } else {
                // 随机生成一些闪烁的点，增加自然感，降低闪烁概率
                if (rand() % 200 < 3) {
                    printf("%c", rand() % 94 + 33);
                } else {
                    printf(" ");
                }
            }
        }
        printf("\n");
    }
}

int main() {
    Drop drops[MAX_DROPS];
    srand(time(NULL));
    initDrops(drops);

    while (1) {
        updateDrops(drops);
        drawDrops(drops);
        // 控制速度
        usleep(50000);
    }

    return 0;
}
//Go语言万年历
package main

import (
        "fmt"
        "time"
)

// 判断是否是闰年
func isLeapYear(year int) bool {
        return (year%4 == 0 && year%100 != 0) || (year%400 == 0)
}

// 获取某年某月的天数
func daysInMonth(year, month int) int {
        switch month {
        case 1, 3, 5, 7, 8, 10, 12:
                return 31
        case 4, 6, 9, 11:
                return 30
        case 2:
                if isLeapYear(year) {
                        return 29
                }
                return 28
        default:
                return 0
        }
}

// 获取某年某月某日是星期几
func getWeekday(year, month, day int) string {
        loc, _ := time.LoadLocation("Local")
        t := time.Date(year, time.Month(month), day, 0, 0, 0, 0, loc)
        weekday := t.Weekday()
        weekdays := []string{"日", "一", "二", "三", "四", "五", "六"}
        return weekdays[weekday]
}
// 打印某年某月的日历
func printCalendar(year, month int) {
        days := daysInMonth(year, month)
        firstDay := getWeekday(year, month, 1)

        fmt.Printf("%d年%d月\n", year, month)
        fmt.Print("日 一 二 三 四 五 六\n")

        // 打印前置空白
        for i := 0; i < int(firstDay[0]-'0'); i++ {
                fmt.Print("   ")
        }

        // 打印日期
        for day := 1; day <= days; day++ {
                fmt.Printf("%2d ", day)
                if (day+int(firstDay[0]-'0'))%7 == 0 {
                        fmt.Println()
                }
        }
        if (days+int(firstDay[0]-'0'))%7 != 0 {
                fmt.Println()
        }
}
func main() {
        var year, month int

        fmt.Print("请输入年份: ")
        fmt.Scan(&year)
        fmt.Print("请输入月份: ")
        fmt.Scan(&month)

        if month < 1 || month > 12 {
                fmt.Println("月份必须在1到12之间")
                return
        }

        printCalendar(year, month)
}
